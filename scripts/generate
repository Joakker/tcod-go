#!/bin/bash

function open_file() {
    package=$(dirname ${1:-.})
    if [ $package == "." ]; then
        package="tcod"
    fi
    file="${1:-const}_const.go"

    cat > $file << EOF
        package $package

        // #include <libtcod.h>
        import "C"

EOF
    echo $file
}

function do_colors() {
    COLORS=(
        'red' 'flame' 'orange' 'amber' 'yellow' 'lime'
        'chartreuse' 'green' 'sea' 'turquoise' 'cyan'
        'sky' 'azure' 'blue' 'han' 'violet' 'purple'
        'fuchsia' 'magenta' 'pink' 'crimson'
    )

    BRGHTS=(
        'desaturated' 'lightest' 'lighter' 'light'
        '-' 'dark' 'darker' 'darkest'
    )

    ALONES=(
        'brass' 'copper' 'gold' 'silver' 'celadon' 'peach'
        'grey' 'sepia' 'black' 'white'
    )

    cat << EOF


    // Color represents a colour with it's RGB or HSV values
    type Color struct {
        color C.TCOD_color_t
    }

    var (

EOF

    for b in ${BRGHTS[@]}; do
        for c in ${COLORS[@]}; do
            if [ $b == '-' ]; then
                cname="C.TCOD_$c"
                gname="${c^}"
            else
                cname="C.TCOD_${b}_${c}"
                gname="${b^}${c^}"
            fi

            echo "// $gname is color $b $c"
            echo "$gname Color = Color{ color: $cname }"
        done
    done

    echo

    for a in ${ALONES[@]}; do
        cname="C.TCOD_$a"
        echo "// ${a^} is color $a"
        echo "${a^} Color = Color{ color: ${cname} }"
    done

    echo ")"
}

function do_input() {
    KEYS=(
        'escape' 'backspace' 'tab' 'enter' 'shift' 'control'
        'alt' 'pause' 'capslock' 'pageup' 'pagedown' 'end'
        'home' 'up' 'left' 'right' 'down' 'printscreen'
        'insert' 'delete' 'lwin' 'rwin' 'apps' 'kpAdd' 'kpSub'
        'kpDiv' 'kpMul' 'kpDec' 'kpEnter' 'numlock' 'scrolllock'
        'space' 'text' 'char'
    )

    cat << EOF

    // KeyCode represents the key that the user is triggering
    type KeyCode struct {
        code C.TCOD_keycode_t
    }

    var (

EOF

    for k in ${KEYS[@]}; do
        cname="C.TCODK_${k^^}"
        gname="Key${k^}"
        echo "// $gname is key $k"
        echo "$gname KeyCode = KeyCode{ code: $cname }"
    done

    for i in {1..12}; do
        cname="C.TCODK_F$i"
        gname="KeyF$i"
        echo "// $gname is key function $i"
        echo "$gname KeyCode = KeyCode{ code: $cname }"
    done

    for i in {0..9}; do
        cname="C.TCODK_$i"
        gname="Key$i"
        echo "// $gname is key $i"
        echo "$gname KeyCode = KeyCode{ code: $cname }"

        cname="C.TCODK_KP$i"
        gname="KeyKp$i"
        echo "// $gname is key keypad $i"
        echo "$gname KeyCode = KeyCode{ code: $cname }"
    done

    echo ")"
    echo

    echo "var ("

    echo "// EvAny is any event"
    echo "EvAny int = int(C.TCOD_EVENT_ANY)"
    echo "// EvNone is no event"
    echo "EvNone int = int(C.TCOD_EVENT_NONE)"

    for ev in 'Finger' 'Key' 'Mouse'
    do
        for st in '-' 'Move' 'Press' 'Release'
        do
            if [ "$st" == '-' ]
            then
                cname="C.TCOD_EVENT_${ev^^}"
                gname="Ev$ev"
            elif [ "$ev" == "Key" ] && [ "$st" == "Move" ]
            then
                continue
            else
                cname="C.TCOD_EVENT_${ev^^}_${st^^}"
                gname="Ev$ev$st"
            fi
            echo "// $gname Event $ev $st"
            echo "$gname int = int($cname)"
        done
    done

    echo ")"
}

function do_console() {
    cat << EOF
    // BgFlag indicates how a background should be drawn
    type BgFlag struct {
        flag C.TCOD_bkgnd_flag_t
    }

    // Renderer indicates which of the available internal renderers
    // should be used
    type Renderer struct {
        renderer C.TCOD_renderer_t
    }

    // Alignment indicates which alignment a console should have
    type Alignment struct {
        alignment C.TCOD_alignment_t
    }

    var (
EOF

    for f in 'none' 'set' 'multiply' 'lighten' \
            'darken' 'screen' 'add' 'burn' 'overlay' 'default'; do
        cname="C.TCOD_BKGND_${f^^}"
        gname="Bg${f^}"
        echo "// $gname background $f"
        echo "$gname BgFlag = BgFlag{ flag: $cname }"
    done

    echo ")"
    echo

    echo "var ("
    for l in 'HLine' 'VLine' 'NE' 'NW' 'SE' 'SW' 'TeeW' 'TeeE' 'TeeN' 'TeeS'; do
        cname="C.TCOD_CHAR_${l^^}"
        gname="Char$l"

        echo "// $gname is char wall $l"
        echo "$gname byte = $cname"
    done
    echo

    for l in 'HLine' 'VLine' 'NE' 'NW' 'SE' 'SW' 'TeeW' 'TeeE' 'TeeN' 'TeeS'; do
        cname="C.TCOD_CHAR_D${l^^}"
        gname="CharD$l"
        echo "// $gname is char double wall $l"
        echo "$gname byte = $cname"
    done
    echo

    for g in 'CheckBox' 'Radio'; do
        for s in 'Set' 'Unset'; do
            cname="C.TCOD_CHAR_${g^^}_${s^^}"
            gname="Char${g}${s}"
            echo "// $gname is char $g $s"
            echo "$gname byte = $cname"
        done
    done
    echo

    for s in 'NW' 'NE' 'SW' 'SE' 'Diag' 'N' 'E'; do
        cname="C.TCOD_CHAR_SUBP_${s^^}"
        gname="CharSubp$s"
        echo "// $gname char subpixel $s"
        echo "$gname byte = $cname"
    done
    echo

    for i in {1..3}; do
        cname="C.TCOD_CHAR_BLOCK$i"
        gname="CharBlock$i"
        echo "// $gname char block $i"
        echo "$gname byte = $cname"
    done
    echo

    for d in 'N' 'E' 'S' 'W'; do
        cname="C.TCOD_CHAR_ARROW_$d"
        gname="CharArrow$d"
        echo "// $gname char arrow $d"
        echo "$gname byte = $cname"
    done
    echo

    for d in 'N' 'E' 'S' 'W'; do
        cname="C.TCOD_CHAR_ARROW2_$d"
        gname="CharArrowNT$d"
        echo "// $gname is char arrow no tail $d"
        echo "$gname byte = $cname"
    done
    echo

    for c in 'Cross' 'Heart' 'Diamond' 'Club' 'Spade' 'Male' \
            'Female' 'Light' 'Pilcrow' 'Section' 'Pound'     \
            'Multiplication' 'Function' 'Reserved' 'Half'    \
            'Cent' 'Yen' 'Currency' 'Division' 'Grade' 'Umlaut'; do
        cname="C.TCOD_CHAR_${c^^}"
        gname="Char$c"
        echo "// $gname is char $c"
        echo "$gname byte = $cname"
    done
    echo

    for i in {1..3}; do
        cname="C.TCOD_CHAR_POW$i"
        gname="CharPow$i"
        echo "// $gname Char Pow $i"
        echo "$gname byte = $cname"
    done
    echo

    echo "// CharDArrowH Char DArrowH"
    echo "CharDArrowH byte = C.TCOD_CHAR_DARROW_H"
    echo "// CharDArrowV Char DArrowV"
    echo "CharDArrowV byte = C.TCOD_CHAR_DARROW_V"
    echo

    for n in '-' 'Inv'; do
        for c in 'Smilie' 'Bullet'; do
            if [ "$n" == '-' ]; then
                cname="C.TCOD_CHAR_${c^^}"
                gname="Char$c"
            else
                cname="C.TCOD_CHAR_${c^^}_${n^^}"
                gname="Char$c$n"
            fi
            echo "// $gname is char $c $n"
            echo "$gname byte = $cname"
        done
        echo
    done
    echo

    echo "// CharNote Char Note"
    echo "CharNote byte = C.TCOD_CHAR_NOTE"
    echo "// CharNoteDouble Char NoteDouble"
    echo "CharNoteDouble byte = C.TCOD_CHAR_NOTE_DOUBLE"
    echo "// CharOneQuarter Char OneQuarter"
    echo "CharOneQuarter byte = C.TCOD_CHAR_ONE_QUARTER"
    echo "// CharBulletSquare Char BulletSquare"
    echo "CharBulletSquare byte = C.TCOD_CHAR_BULLET_SQUARE"

    echo ")"
    echo

    echo "var ("

    for r in  'OpenGL' 'OpenGL2' 'SDL' 'SDL2'; do
        cname="C.TCOD_RENDERER_${r^^}"
        gname="Render$r"
        echo "// $gname is renderer $r"
        echo "$gname Renderer = Renderer{ renderer: $cname }"
    done

    echo ")"
    echo

    echo "var ("

    for a in 'Left' 'Right' 'Center'; do
        cname="C.TCOD_${a^^}"
        gname="Align$a"
        echo "// $gname is alignment $a"
        echo "$gname Alignment = Alignment{ alignment: $cname }"
    done
    echo ")"
}

>&2 echo "Don't use this script yet!"
# file=$(open_file "color")
#     do_colors >> $file
#     gofmt -w -s $file

# file=$(open_file "tinput/input")
#     do_input >> $file
#     gofmt -w -s $file

# file=$(open_file "console")
#     do_console >> $file
#     gofmt -w -s $file
